<snippet>
	<content><![CDATA[
const int FIELD = 131072;

vector<int> poly_mul(vector<int> a, vector<int> b) {
	int n = a.size() + b.size() - 1;
	int m = 1;
	while (m < n)
		m *= 2;
	a.resize(m);
	b.resize(m);

	if (a == b) {
		fft::fft(a, false);
		b = a;
	} else {
		fft::fft(a, false);
		fft::fft(b, false);
	}
	for (int i=0; i<m; i++)
		a[i] = a[i] * 1ll * b[i] % fft::mod;
	fft::fft(a, true);
	a.resize(n);
	return a;
}

vector<int> poly_add(vector<int> a, vector<int> b) {
	int n = max(a.size(), b.size());
	a.resize(n);
	b.resize(n);
	for (int i=0; i<n; i++) {
		a[i] += b[i];
		if (a[i] >= fft::mod)
			a[i] -= fft::mod;
	}
	return a;
}

vector<int> poly_sub(vector<int> a, vector<int> b) {
	int n = max(a.size(), b.size());
	a.resize(n);
	b.resize(n);
	for (int i=0; i<n; i++) {
		a[i] -= b[i];
		if (a[i] < 0)
			a[i] += fft::mod;
	}
	return a;
}

vector<int> poly_inverse(vector<int> a, int N = FIELD) {
	a.resize(N);
	vector<int> rn = {fft::inverse(a[0])};
	for (int n=1; n<N; n*=2) {
		auto an = a;
		an.resize(2*n);
		auto tmp = poly_mul(an, poly_mul(rn, rn));
		rn = poly_add(rn, poly_sub(rn, tmp));
		rn.resize(2*n);
	}
	return rn;
}

vector<int> poly_sqrt(vector<int> a, int N = FIELD) {
	a.resize(N);
	vector<int> rn = {1}; // pretpostavljamo da je a[0] = 1
	for (int n=1; n<N; n*=2) {
		auto t = poly_add(rn, rn);
		t = poly_inverse(t, n);
		auto b = poly_sub(a, poly_mul(rn, rn));
		b.erase(b.begin(), b.begin() + n);
		b.resize(n);
		t = poly_mul(t, b);
		rn.resize(2*n);
		for (int i=0; i<n; i++)
			rn[i+n] = t[i];
	}
	return rn;
}

]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>polynomials</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<scope>source.c++</scope>

	<description>Operations on polynomials using FFT</description>
</snippet>
